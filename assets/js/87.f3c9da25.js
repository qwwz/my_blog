(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{243:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"_008-tcp-的超时重传时间是如何计算的？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_008-tcp-的超时重传时间是如何计算的？","aria-hidden":"true"}},[t._v("#")]),t._v(" 008: TCP 的超时重传时间是如何计算的？")]),t._v(" "),a("p",[t._v("TCP 具有超时重传机制，即间隔一段时间没有等到数据包的回复时，重传这个数据包。")]),t._v(" "),a("p",[t._v("那么这个重传间隔是如何来计算的呢？")]),t._v(" "),a("p",[t._v("今天我们就来讨论一下这个问题。")]),t._v(" "),a("p",[t._v("这个重传间隔也叫做"),a("strong",[t._v("超时重传时间")]),t._v("(Retransmission TimeOut, 简称RTO)，它的计算跟上一节提到的 RTT 密切相关。这里我们将介绍两种主要的方法，一个是经典方法，一个是标准方法。")]),t._v(" "),a("h2",{attrs:{id:"经典方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#经典方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 经典方法")]),t._v(" "),a("p",[t._v("经典方法引入了一个新的概念——SRTT(Smoothed round trip time，即平滑往返时间)，没产生一次新的 RTT. 就根据一定的算法对 SRTT 进行更新，具体而言，计算方式如下(SRTT 初始值为0):")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SRTT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("α "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SRTT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" α"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RTT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("其中，α 是"),a("strong",[t._v("平滑因子")]),t._v("，建议值是"),a("code",[t._v("0.8")]),t._v("，范围是"),a("code",[t._v("0.8 ~ 0.9")]),t._v("。")]),t._v(" "),a("p",[t._v("拿到 SRTT，我们就可以计算 RTO 的值了:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RTO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ubound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lbound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" β "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SRTT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("β 是加权因子，一般为"),a("code",[t._v("1.3 ~ 2.0")]),t._v("， "),a("strong",[t._v("lbound")]),t._v(" 是下界，"),a("strong",[t._v("ubound")]),t._v(" 是上界。")]),t._v(" "),a("p",[t._v("其实这个算法过程还是很简单的，但是也存在一定的局限，就是在 RTT 稳定的地方表现还可以，而在 RTT 变化较大的地方就不行了，因为平滑因子 α 的范围是"),a("code",[t._v("0.8 ~ 0.9")]),t._v(", RTT 对于 RTO 的影响太小。")]),t._v(" "),a("h2",{attrs:{id:"标准方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 标准方法")]),t._v(" "),a("p",[t._v("为了解决经典方法对于 RTT 变化不敏感的问题，后面又引出了标准方法，也叫"),a("code",[t._v("Jacobson / Karels 算法")]),t._v("。")]),t._v(" "),a("p",[t._v("一共有三步。")]),t._v(" "),a("p",[a("strong",[t._v("第一步")]),t._v(": 计算"),a("code",[t._v("SRTT")]),t._v("，公式如下:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SRTT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" α"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SRTT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" α "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RTT")]),t._v("\n")])])]),a("p",[t._v("注意这个时候的 "),a("code",[t._v("α")]),t._v("跟经典方法中的"),a("code",[t._v("α")]),t._v("取值不一样了，建议值是"),a("code",[t._v("1/8")]),t._v("，也就是"),a("code",[t._v("0.125")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("第二步")]),t._v(": 计算"),a("code",[t._v("RTTVAR")]),t._v("(round-trip time variation)这个中间变量。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RTTVAR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" β"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RTTVAR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" β "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RTT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SRTT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("β 建议值为 0.25。这个值是这个算法中出彩的地方，也就是说，它记录了最新的 RTT 与当前 SRTT 之间的差值，给我们在后续感知到 RTT 的变化提供了抓手。")]),t._v(" "),a("p",[a("strong",[t._v("第三步")]),t._v(": 计算最终的"),a("code",[t._v("RTO")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RTO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" µ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SRTT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ∂ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RTTVAR")]),t._v(" \n")])])]),a("p",[a("code",[t._v("µ")]),t._v("建议值取"),a("code",[t._v("1")]),t._v(", "),a("code",[t._v("∂")]),t._v("建议值取"),a("code",[t._v("4")]),t._v("。")]),t._v(" "),a("p",[t._v("这个公式在 SRTT 的基础上加上了最新 RTT 与它的偏移，从而很好的感知了 RTT 的变化，这种算法下，RTO 与 RTT 变化的差值关系更加密切。")])])}],!1,null,null,null);s.default=r.exports}}]);